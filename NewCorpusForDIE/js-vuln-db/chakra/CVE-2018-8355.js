function gc() {
    for (let i = 0; i < 10; i++) {
      new ArrayBuffer(1024 * 1024 * 10);
    }
}

WScript = {
    _jscGC: gc,
    _jscPrint: console.log,
    _convertPathname : function(dosStylePath)
    {
        return dosStylePath.replace(/\\/g, "/");
    },
    Arguments : [ "summary" ],
    Echo : function()
    {
        WScript._jscPrint.apply(this, arguments);
    },
    LoadScriptFile : function(path)
    {
    },
    Quit : function()
    {
    },
    Platform :
    {
        "BUILD_TYPE": "Debug"
    }
};

function CollectGarbage()
{
    WScript._jscGC();
}

function $ERROR(e)
{
}

if (typeof(console) == "undefined") {
    console = {
        log: print
    };
}

if (typeof(gc) == "undefined") {
  gc = function() {
    for (let i = 0; i < 10; i++) {
      new ArrayBuffer(1024 * 1024 * 10);
    }
  }
}

if (typeof(BigInt) == "undefined") {
  BigInt = function (v) { return new Number(v); }
}

if (typeof(BigInt64Array) == "undefined") {
  BigInt64Array = function(v) { return new Array(v); }
}

if (typeof(BigUint64Array) == "undefined") { 
  BigUint64Array = function (v) { return new Array(v); }
}

if (typeof(quit) == "undefined") {
  quit = function() {
  }
}

function opt(arr, s) {
  arr[0] = 1.1;

  if (s !== null) {
    let tmp = 'a'.localeCompare(s);
  }

  arr[0] = 2.3023e-320;
}

function main() {
  let arr = [1.1];

  for (let i = 0; i < 100; i++) {
    'a'.localeCompare('x', []); // Optimize the JavaScript localeCompare

    opt(arr, null); // for profiling all instructions in opt.

    try {
      opt(arr, {
        toString: () => {
          throw 1; // Don't profile "if (locales === undefined && options === undefined) {"
        }
      });
    } catch (e) {
      ;
    }
  }

  opt(arr, {
    toString: () => {
      // Called twice
      arr[0] = {};
    }
  });
  print(arr);
}

main();
