function gc() {
    for (let i = 0; i < 10; i++) {
      new ArrayBuffer(1024 * 1024 * 10);
    }
}

function noInline() {
}

function OSRExit() {
}

function ensureArrayStorage() {
}

function fiatInt52(i) {
	return i;
}

function noDFG() {
}

function noOSRExitFuzzing() {
}

function isFinalTier() {
	return true;
}

function transferArrayBuffer() {
}

function fullGC() {
	if (gc !== undefined) 
		gc();
	else
		CollectGarbage();
}

function edenGC() {
	if (gc !== undefined) 
		gc();
	else
		CollectGarbage();
}

function forceGCSlowPaths() {
	if (gc !== undefined) 
		gc();
	else
		CollectGarbage();
}

function noFTL() {

}

function debug(x) {
	console.log(x);
}

function describe(x) {
	console.log(x);
}

function isInt32(i) {
	return (typeof i === "number");
}

function BigInt(i) {
	return i;
}

if (typeof(console) == "undefined") {
    console = {
        log: print
    };
}

if (typeof(gc) == "undefined") {
  gc = function() {
    for (let i = 0; i < 10; i++) {
      new ArrayBuffer(1024 * 1024 * 10);
    }
  }
}

if (typeof(BigInt) == "undefined") {
  BigInt = function (v) { return new Number(v); }
}

if (typeof(BigInt64Array) == "undefined") {
  BigInt64Array = function(v) { return new Array(v); }
}

if (typeof(BigUint64Array) == "undefined") { 
  BigUint64Array = function (v) { return new Array(v); }
}

if (typeof(quit) == "undefined") {
  quit = function() {
  }
}

const wasmCode = new Uint8Array([
      0, 0x61, 0x73, 0x6d, 0x1, 0, 0, 0, 0x1, 0xe, 0x3, 0x60,
      0x2, 0x7c, 0x7c, 0x1, 0x7f, 0x60, 0, 0, 0x60, 0, 0x1, 0x7f,
      0x2, 0xe, 0x1, 0x3, 0x65, 0x6e, 0x76, 0x6, 0x6a, 0x73,
      0x46, 0x75, 0x6e, 0x63, 0, 0, 0x3, 0x3, 0x2, 0x1, 0x2, 0x4,
      0x5, 0x1, 0x70, 0x1, 0x1, 0x1, 0x5, 0x3, 0x1, 0, 0x2, 0x6,
      0x15, 0x3, 0x7f, 0x1, 0x41, 0x80, 0x88, 0x4, 0xb, 0x7f, 0,
      0x41, 0x80, 0x88, 0x4, 0xb, 0x7f, 0, 0x41, 0x80, 0x8, 0xb,
      0x7, 0x2c, 0x4, 0x6, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
      0x2, 0, 0xb, 0x5f, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f,
      0x62, 0x61, 0x73, 0x65, 0x3, 0x1, 0xa, 0x5f, 0x5f, 0x64,
      0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x64, 0x3, 0x2, 0x4,
      0x6d, 0x61, 0x69, 0x6e, 0, 0x2, 0, 0x1f, 0x2, 0x2, 0, 0xb,
      0x1a, 0, 0x44, 0x43, 0x43, 0x43, 0, 0, 0, 0xff, 0xff, 0x44,
      0x43, 0x43, 0x43, 0, 0, 0, 0xff, 0xff, 0x10, 0x80, 0x80,
      0x80, 0x80, 0, 0xb, 0, 0x4d, 0xb, 0x2e, 0x64, 0x65, 0x62,
      0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x3d, 0, 0, 0,
      0x4, 0, 0, 0, 0, 0, 0x4, 0x1, 0, 0, 0, 0, 0xc, 0, 0x23, 0,
      0, 0, 0, 0, 0, 0, 0x44, 0, 0, 0, 0x5, 0, 0, 0, 0x1a, 0, 0,
      0, 0x2, 0x5, 0, 0, 0, 0x1a, 0, 0, 0, 0x5e, 0x4d, 0, 0, 0x1,
      0x17, 0x39, 0, 0, 0, 0x3, 0x63, 0, 0, 0, 0x5, 0x4, 0, 0,
      0x10, 0xe, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6d,
      0x61, 0x63, 0x69, 0x6e, 0x66, 0x6f, 0, 0, 0x42, 0xd, 0x2e,
      0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x61, 0x62, 0x62, 0x72,
      0x65, 0x76, 0x1, 0x11, 0x1, 0x25, 0xe, 0x13, 0x5, 0x3, 0xe,
      0x10, 0x17, 0x1b, 0xe, 0x11, 0x1, 0x12, 0x6, 0, 0, 0x2,
      0x2e, 0, 0x11, 0x1, 0x12, 0x6, 0x3, 0xe, 0x3a, 0xb, 0x3b,
      0xb, 0x27, 0x19, 0x49, 0x13, 0x56, 0x19, 0, 0, 0x3, 0x24,
      0, 0x3, 0xe, 0x3e, 0xb, 0xb, 0xb, 0, 0, 0, 0, 0x64, 0xb,
      0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6c, 0x69, 0x6e,
      0x65, 0x54, 0, 0, 0, 0x35, 0, 0x38, 0, 0, 0, 0x1, 0x1, 0x1,
      0xfb, 0xe, 0xd, 0, 0x1, 0x1, 0x1, 0x1, 0, 0, 0, 0x1, 0, 0,
      0x1, 0x2f, 0x74, 0x6d, 0x70, 0x2f, 0x62, 0x75, 0x69, 0x6c,
      0x64, 0x5f, 0x31, 0x36, 0x6a, 0x74, 0x37, 0x69, 0x74, 0x6a,
      0x70, 0x69, 0x6b, 0x69, 0x2e, 0x24, 0, 0, 0x66, 0x69, 0x6c,
      0x65, 0x2e, 0x63, 0, 0x1, 0, 0, 0, 0, 0x5, 0x2, 0x5, 0, 0,
      0, 0x18, 0x5, 0xa, 0xa, 0x8, 0x2f, 0x5, 0x3, 0x6, 0x66,
      0x2, 0x1, 0, 0x1, 0x1, 0, 0x72, 0xa, 0x2e, 0x64, 0x65,
      0x62, 0x75, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x63, 0x6c, 0x61,
      0x6e, 0, 0, 0, 0, 0, 0, 0, 0x6f, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0x74, 0, 0, 0, 0, 0, 0, 0x34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0x62, 0, 0x69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0x36, 0, 0, 0, 0x69, 0x74, 0x6a, 0x70, 0x69, 0x6b,
      0x69, 0x2e, 0x24, 0, 0x6d, 0x61, 0x69, 0x6e, 0, 0x69, 0x41,
      0x74, 0, 0, 0x29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      0, 0, 0, 0, 0, 0, 0
]);

try {
    new WebAssembly.Module(wasmCode)
    throw new Error('WebAssembly module should have failed to validate');
} catch (error) {
    if (error.message !== "WebAssembly.Module doesn't parse at byte 585: Number of functions parsed (0) does not match the number of declared functions (2) (evaluating 'new WebAssembly.Module(wasmCode)')")
        throw new Error(`Unexpected error: ${error.message}`);
}
